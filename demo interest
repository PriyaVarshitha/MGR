import java.io.*;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.*;

class Account {
    private String accountNumber;
    private LocalDate openingDate;
    private String accountType;
    private double balance;

    public Account(String accountNumber, LocalDate openingDate, String accountType, double balance) {
        this.accountNumber = accountNumber;
        this.openingDate = openingDate;
        this.accountType = accountType;
        this.balance = balance;
    }

    public String getAccountNumber() {
        return accountNumber;
    }

    public LocalDate getOpeningDate() {
        return openingDate;
    }

    public String getAccountType() {
        return accountType;
    }

    public double getBalance() {
        return balance;
    }
}

class Transaction {
    private String transactionId;
    private String accountNumber;
    private LocalDate transactionDate;
    private double amount;

    public Transaction(String transactionId, String accountNumber, LocalDate transactionDate, double amount) {
        this.transactionId = transactionId;
        this.accountNumber = accountNumber;
        this.transactionDate = transactionDate;
        this.amount = amount;
    }

    public String getTransactionId() {
        return transactionId;
    }

    public String getAccountNumber() {
        return accountNumber;
    }

    public LocalDate getTransactionDate() {
        return transactionDate;
    }

    public double getAmount() {
        return amount;
    }
}

class InterestCalculator {
    private static final double INTEREST_RATE = 0.045; // 4.5%
    private static final DateTimeFormatter MONTH_FORMATTER = DateTimeFormatter.ofPattern("MMM yyyy");

    private List<Account> accounts;
    private List<Transaction> transactions;

    public InterestCalculator() {
        accounts = new ArrayList<>();
        transactions = new ArrayList<>();
    }

    public void loadAccountData(String accountDataFile) {
        try (Scanner scanner = new Scanner(new File(accountDataFile))) {
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                String[] parts = line.split(",");
                String accountNumber = parts[0];
                LocalDate openingDate = LocalDate.parse(parts[1]);
                String accountType = parts[2];
                double balance = Double.parseDouble(parts[3]);
                Account account = new Account(accountNumber, openingDate, accountType, balance);
                accounts.add(account);
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    public void loadTransactionData(String transactionDataFile) {
        try (Scanner scanner = new Scanner(new File(transactionDataFile))) {
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                String[] parts = line.split(",");
                String transactionId = parts[0];
                String accountNumber = parts[1];
                LocalDate transactionDate = LocalDate.parse(parts[2]);
                double amount = Double.parseDouble(parts[3]);
                Transaction transaction = new Transaction(transactionId, accountNumber, transactionDate, amount);
                transactions.add(transaction);
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    public double getBalanceAsOnDate(String accountNumber, LocalDate date) {
        double balance = 0.0;
        for (Transaction transaction : transactions) {
            if (transaction.getAccountNumber().equals(accountNumber) &&
                    !transaction.getTransactionDate().isAfter(date)) {
                balance += transaction.getAmount();
            }
        }
        return balance;
    }

    public double getMinBal(String accountNumber, int month, int year) {
        LocalDate startOfMonth = LocalDate.of(year, month, 1);
        LocalDate endOfMonth = startOfMonth.withDayOfMonth(startOfMonth.lengthOfMonth());
        double minBalance = Double.MAX_VALUE;

        for (Transaction transaction : transactions) {
            if (transaction.getAccountNumber().equals(accountNumber) &&
                    !transaction.getTransactionDate().isAfter(endOfMonth)) {
                minBalance = Math.min(minBalance, getBalanceAsOnDate(accountNumber, transaction.getTransactionDate()));
            }
        }

        return minBalance;
    }

    public double calculateInterest(String accountNumber) {
        LocalDate currentDate = LocalDate.now().minusMonths(1); // Ignore the current month
        double totalInterest = 0.0;

        for (int i = 0; i < 6; i++) {
            LocalDate startOfMonth = currentDate.minusMonths(i).withDayOfMonth(1);
            LocalDate endOfMonth = startOfMonth.withDayOfMonth(startOfMonth.lengthOfMonth());
            int month = startOfMonth.getMonthValue();
            int year = startOfMonth.getYear();
            double minBalance = getMinBal(accountNumber, month, year);
            double interest = minBalance * INTEREST_RATE;
            totalInterest += interest;

            System.out.println("Interest for " + startOfMonth.format(MONTH_FORMATTER) + ": " + interest);
        }

        return totalInterest;
    }

    public List<Double> calculateInterestForAllAccounts() {
        List<Double> accountInterests = new ArrayList<>();

        for (Account account : accounts) {
            double interest = calculateInterest(account.getAccountNumber());
            accountInterests.add(interest);
        }

        return accountInterests;
    }
}

public class Main {
    public static void main(String[] args) {
        InterestCalculator calculator = new InterestCalculator();
        calculator.loadAccountData("accountData.txt");
        calculator.loadTransactionData("transactionData.txt");

        List<Double> accountInterests = calculator.calculateInterestForAllAccounts();

        System.out.println("\nInterest Calculation Results:");
        for (int i = 0; i < accountInterests.size(); i++) {
            System.out.println("Account: A" + (i + 1001) + ", Interest: " + accountInterests.get(i));
        }
    }
}


A1001,2023-01-05,Savings,5000.0
A1002,2023-02-10,Savings,10000.0
A1003,2023-03-15,Savings,7500.0



T1001,A1001,2023-06-01,1000.0
T1002,A1001,2023-07-15,-500.0
T1003,A1001,2023-08-10,2000.0
T1004,A1002,2023-05-01,1500.0
T1005,A1002,2023-06-20,-1000.0
T1006,A1002,2023-09-10,3000.0
T1007,A1003,2023-06-01,500.0
T1008,A1003,2023-07-05,-1000.0
T1009,A1003,2023-08-15,1500.0
